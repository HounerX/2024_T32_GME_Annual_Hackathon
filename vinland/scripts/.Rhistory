app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
library(jsonlite)
library(htmlwidgets)
library(gapminder)
library(quantmod)
gwas_plot_maker<-function(disease_name="UC",display_thres_cutoff=0.01){
gwas_file=read.table("../config/gwas_filetable.txt",header = TRUE)
eQTL_file=read.csv("../data/cis_eqtls_S10.csv",header = TRUE)
filename=gwas_file[gwas_file$disease==disease_name,"path"]
df <- read.table(filename,header = TRUE)
df$base_pair_location<-as.numeric(df$base_pair_location)
df$chromosome<-as.numeric(df$chromosome)
theorder<-order(df$chromosome,df$base_pair_location)
df=df[theorder,]
df_filtered<-df[df$p_value<display_thres_cutoff,]
df_filtered$index=c(1:NROW(df_filtered))
df_filtered$is_cis_eQTL <- as.numeric(df_filtered$variant_id %in% eQTL_file$SNP)
fig_gwas <- plot_ly(data = df_filtered,
x = ~index,
y = ~-log10(p_value),
#= ~is_cis_eQTL, #Specifiying that the point size be based on the population size causes an error for me for some odd reason, maybe your results will vary if you want to uncomment this and try it out
color = ~(chromosome%%2),
#text = ~country,
# frame = ~year,
type = 'scatter',
mode = 'markers',
marker = list(size=2.5), #list(sizemode = 'diameter', sizeref = 10, sizemin = 1),
hoverinfo = 'text',
text = ~paste('ID:', variant_id,
'<br>chr:', chromosome,
'<br>bp:', base_pair_location),
customdata = ~variant_id
) %>% hide_colorbar()
fig_gwas = fig_gwas %>% add_trace(
data = df_filtered[df_filtered$is_cis_eQTL==1,],
x = ~index,
y = ~-log10(p_value),
# size = ~pop, #Specifiying that the point size be based on the population size causes an error for me for some odd reason, maybe your results will vary if you want to uncomment this and try it out
color = 'red',
#text = ~country,
# frame = ~year,
type = 'scatter',
mode = 'markers',
marker = list(size=5),
#showlegend=FALSE,
hoverinfo = 'text',
text = ~paste('ID:', variant_id,
'<br>chr:', chromosome,
'<br>bp:', base_pair_location),
customdata = ~variant_id
)
return(fig_gwas)
}
gwas_plot_maker()
library(plotly)
library(shiny)
library(ggplot2)
library(dplyr)
library(jsonlite)
library(htmlwidgets)
library(gapminder)
library(quantmod)
#Cell type,Gene ID,Gene Ensembl ID,SNP,Chromosome,Position,SNP assessed allele,eSNP rank,rho correlation coefficient,S-statistics,pvalue,qvalue,FDR
#B IN,RP11-298J20.3,ENSG00000226899,rs4962711,10,126644482,C,eSNP1,-0.473,232418781.992,8.653e-56,5.108e-50,2.164e-05
#B IN,PPA1,ENSG00000180817,rs12355080,10,71963608,A,eSNP1,0.428,90338125.825,6.308e-45,1.646e-40,2.164e-05
#B IN,GDI2
# awk 'BEGIN{FS=","}{snpcnt[$4]++}END{for(i in snpcnt) if(snpcnt[i]>1) print i, snpcnt[i]}' cis_eqtls_S10.csv
# rs5760147 15
# rs114179634 2
# rs9298467 4
# rs12151742 2
# rs5760147 15
# rs11935857 2
eQTLsumm_plot_maker <- function(rsid="rs5760147"){
df <- read.csv("../data/cis_eqtls_S10.csv",header=TRUE)
df_filtered<-df[df$SNP==rsid,]
df_filtered$Gene.ID<-as.factor(df_filtered$Gene.ID)
#  if(dim(df_filtered,1)==0)
fig <- plot_ly(data = df_filtered,
x = ~Gene.ID,
y = ~-log10(FDR),
# size = ~pop, #Specifiying that the point size be based on the population size causes an error for me for some odd reason, maybe your results will vary if you want to uncomment this and try it out
color = ~Cell.type,
#text = ~country,
# frame = ~year,
type = 'bar',
#mode = 'markers',
#marker = list(sizemode = 'diameter', sizeref = 2e5, sizemin = 1),
showlegend=FALSE,
hoverinfo = 'text',
text = ~paste('ID:', Gene.ID,
'<br>Cell type:', Cell.type)
)
fig
return(fig)
}
eQTLsumm_plot_maker()
library(dash)
library(plotly)
source("gwas.R")
source("eQTLsummary_per_SNP.R")
# Initialize the Dash app
app <- Dash$new()
# Define the layout of the app
app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
library(dash)
library(plotly)
app <- Dash$new()
app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
library(dash)
library(plotly)
source("gwas.R")
source("eQTLsummary_per_SNP.R")
# Initialize the Dash app
app <- Dash$new()
# Define the layout of the app
app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
port = 8000
print(paste0('Dash app running on http://127.0.0.1:', port, '/'))
app %>% run_app(port = port)
library(dash)
library(plotly)
source("gwas.R")
source("eQTLsummary_per_SNP.R")
# Initialize the Dash app
app <- Dash$new()
# Define the layout of the app
app$layout(
div(
list(
dccDropdown(
id = 'GWAS-dataset-dropdown',
options = list(
list(label = 'UC', value = 'UC'),
list(label = 'CD', value = 'CD')
),
value = 'UC'
),
dccGraph(id = 'GWAS-summary-graph'),
dccGraph(id = 'eQTL-summary-graph')
)
)
)
library(dash)
library(dplyr)
library(shiny)
df <- read.csv('https://plotly.github.io/datasets/country_indicators.csv', header = TRUE, sep = ",")
available_indicators <- unique(df$Indicator.Name)
option_indicator <- lapply(available_indicators, function(x) list(label = x, value = x))
app <- dash_app()
app %>% add_stylesheet('https://codepen.io/chriddyp/pen/bWLwgP.css')
app %>% set_layout(
div(
style = list(
borderBottom = 'thin lightgrey solid',
backgroundColor = 'rgb(250, 250, 250)',
padding = '10px 5px'
),
dashDataTable(
id = 'data-table',
columns = lapply(names(df), function(colName) {
list(id = colName, name = colName)
}),
data = head(df, 10),
page_size = 10,
filter_action = 'native',
sort_action = 'native',
style_table = list(overflowX = 'auto'),
style_cell = list(textAlign = 'left')
),
div(
dccDropdown(
id = 'crossfilter-xaxis-column',
options = option_indicator,
value = 'Fertility rate, total (births per woman)'
),
dccRadioItems(
id = 'crossfilter-xaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', display = 'inline-block')
),
div(
dccDropdown(
id = 'crossfilter-yaxis-column',
options = option_indicator,
value = 'Life expectancy at birth, total (years)'
),
dccRadioItems(
id = 'crossfilter-yaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', float = 'right', display = 'inline-block')
),
div(
dccGraph(
id = 'crossfilter-indicator-scatter',
hoverData = list(points = list(list(customdata = 'Japan')))
),
style = list(width = '49%', display = 'inline-block', padding = '0 20')
),
div(
dccGraph(id='x-time-series'),
dccGraph(id='y-time-series'),
style = list(display = 'inline-block', width = '49%')
),
div(
style = list(display = 'flex', justifyContent = 'space-between', padding = '0px 20px 20px 20px'),
div(
div('Year:', style = list(color = 'red', marginBottom = '5px')),
dccSlider(
id = 'crossfilter-year--slider',
min = 0,
max = length(unique(df$Year)) - 1,
marks = unique(df$Year),
value = length(unique(df$Year)) - 1
),
style = list(width = '48%')
),
div(
div('Year Range Slider:', style = list(color = 'green', marginBottom = '5px')),
dccRangeSlider(
id = 'crossfilter-year-range--slider',
min = min(df$Year),
max = max(df$Year),
value = list(min(df$Year), max(df$Year)),
marks = as.list(setNames(as.list(unique(df$Year)), unique(df$Year))),
step = 1
),
style = list(width = '48%')
)
)
)
)
df <- read.csv('https://plotly.github.io/datasets/country_indicators.csv', header = TRUE, sep = ",")
available_indicators <- unique(df$Indicator.Name)
option_indicator <- lapply(available_indicators, function(x) list(label = x, value = x))
app <- dash_app()
app %>% add_stylesheet('https://codepen.io/chriddyp/pen/bWLwgP.css')
app %>% set_layout(
div(
style = list(
borderBottom = 'thin lightgrey solid',
backgroundColor = 'rgb(250, 250, 250)',
padding = '10px 5px'
),
dashDataTable(
id = 'data-table',
columns = lapply(names(df), function(colName) {
list(id = colName, name = colName)
}),
data = head(df, 10),
page_size = 10,
filter_action = 'native',
sort_action = 'native',
style_table = list(overflowX = 'auto'),
style_cell = list(textAlign = 'left')
),
div(
dccDropdown(
id = 'crossfilter-xaxis-column',
options = option_indicator,
value = 'Fertility rate, total (births per woman)'
),
dccRadioItems(
id = 'crossfilter-xaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', display = 'inline-block')
),
div(
dccDropdown(
id = 'crossfilter-yaxis-column',
options = option_indicator,
value = 'Life expectancy at birth, total (years)'
),
dccRadioItems(
id = 'crossfilter-yaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', float = 'right', display = 'inline-block')
),
div(
dccGraph(
id = 'crossfilter-indicator-scatter',
hoverData = list(points = list(list(customdata = 'Japan')))
),
style = list(width = '49%', display = 'inline-block', padding = '0 20')
),
div(
dccGraph(id='x-time-series'),
dccGraph(id='y-time-series'),
style = list(display = 'inline-block', width = '49%')
),
div(
style = list(display = 'flex', justifyContent = 'space-between', padding = '0px 20px 20px 20px'),
div(
div('Year:', style = list(color = 'red', marginBottom = '5px')),
dccSlider(
id = 'crossfilter-year--slider',
min = 0,
max = length(unique(df$Year)) - 1,
marks = unique(df$Year),
value = length(unique(df$Year)) - 1
),
style = list(width = '48%')
),
div(
div('Year Range Slider:', style = list(color = 'green', marginBottom = '5px')),
dccRangeSlider(
id = 'crossfilter-year-range--slider',
min = min(df$Year),
max = max(df$Year),
value = list(min(df$Year), max(df$Year)),
marks = as.list(setNames(as.list(unique(df$Year)), unique(df$Year))),
step = 1
),
style = list(width = '48%')
)
)
)
)
library(dash)
library(dplyr)
library(shiny)
df <- read.csv('https://plotly.github.io/datasets/country_indicators.csv', header = TRUE, sep = ",")
available_indicators <- unique(df$Indicator.Name)
option_indicator <- lapply(available_indicators, function(x) list(label = x, value = x))
app <- dash_app()
app %>% add_stylesheet('https://codepen.io/chriddyp/pen/bWLwgP.css')
app %>% set_layout(
div(
style = list(
borderBottom = 'thin lightgrey solid',
backgroundColor = 'rgb(250, 250, 250)',
padding = '10px 5px'
),
dashDataTable(
id = 'data-table',
columns = lapply(names(df), function(colName) {
list(id = colName, name = colName)
}),
data = head(df, 10),
page_size = 10,
filter_action = 'native',
sort_action = 'native',
style_table = list(overflowX = 'auto'),
style_cell = list(textAlign = 'left')
),
div(
dccDropdown(
id = 'crossfilter-xaxis-column',
options = option_indicator,
value = 'Fertility rate, total (births per woman)'
),
dccRadioItems(
id = 'crossfilter-xaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', display = 'inline-block')
),
div(
dccDropdown(
id = 'crossfilter-yaxis-column',
options = option_indicator,
value = 'Life expectancy at birth, total (years)'
),
dccRadioItems(
id = 'crossfilter-yaxis-type',
options = list(list(label = 'Linear', value = 'linear'),
list(label = 'Log', value = 'log')),
value = 'linear',
labelStyle = list(display = 'inline-block')
),
style = list(width = '49%', float = 'right', display = 'inline-block')
),
div(
dccGraph(
id = 'crossfilter-indicator-scatter',
hoverData = list(points = list(list(customdata = 'Japan')))
),
style = list(width = '49%', display = 'inline-block', padding = '0 20')
),
div(
dccGraph(id='x-time-series'),
dccGraph(id='y-time-series'),
style = list(display = 'inline-block', width = '49%')
),
div(
style = list(display = 'flex', justifyContent = 'space-between', padding = '0px 20px 20px 20px'),
div(
div('Year:', style = list(color = 'red', marginBottom = '5px')),
dccSlider(
id = 'crossfilter-year--slider',
min = 0,
max = length(unique(df$Year)) - 1,
marks = unique(df$Year),
value = length(unique(df$Year)) - 1
),
style = list(width = '48%')
),
div(
div('Year Range Slider:', style = list(color = 'green', marginBottom = '5px')),
dccRangeSlider(
id = 'crossfilter-year-range--slider',
min = min(df$Year),
max = max(df$Year),
value = list(min(df$Year), max(df$Year)),
marks = as.list(setNames(as.list(unique(df$Year)), unique(df$Year))),
step = 1
),
style = list(width = '48%')
)
)
)
)
detach("package:shiny", unload = TRUE)
